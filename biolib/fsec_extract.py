import re
import tempfile as tf
import pandas as pd
import os

def shimadzu_to_csv (txt_file, flow_rate=1.0) :
    '''Takes a .txt file generated by LabSolutions with a Shimadzu HPLC and
    generates a more easily parsable.csv
    Optional arguments: flow rate in ml/min. Default: 1.0'''

    uv_name = re.compile('\\[LC Chromatogram\\(Detector A-Ch1\\)\\]\n')
    fl_name = re.compile('\\[LC Chromatogram\\(Detector B-Ch1\\)\\]\n')
    points_name = re.compile('# of Points.')

    with open(txt_file, 'r') as f:
        # find the index of uv and fl start and end
        for index, line in enumerate(f) :
            if uv_name.match(line) :
                uv_start = index + 9
            elif fl_name.match(line) :
                fl_start = index + 10
            elif points_name.match(line) :
                nr_of_points = int(line.split()[3])

        # write temp file for uv data and convert to data frame
        with tf.SpooledTemporaryFile(max_size=100 * 1024, mode='w+', encoding='utf-8') as tmp_file :
            f.seek(0)
            for index, line in enumerate(f) :
                if index in range(uv_start, uv_start + nr_of_points) :
                    tmp_file.write(line)
            tmp_file.seek(0)
            uv_df = pd.read_table(tmp_file, header=None, index_col=0, names=['Ret.t.min', 'UV.int'])

        # write temp file for for fl data and convert to data frame
        with tf.SpooledTemporaryFile(max_size=100 * 1024, mode='w+', encoding='utf-8') as tmp_file :
            f.seek(0)
            for index, line in enumerate(f) :
                if index in range(fl_start, fl_start + nr_of_points) :
                    tmp_file.write(line)
            tmp_file.seek(0)
            fl_df = pd.read_table(tmp_file, header=None, index_col=0, names=['Ret.t.min', 'Fl.int'])


        final_df = pd.concat((uv_df, fl_df), axis=1).reset_index()
        final_df.iloc[:,0] = final_df.iloc[:,0] * flow_rate
        final_df = final_df.rename(columns={'Ret.t.min': 'Ret.t.ml.min'})
        final_df = final_df.set_index('Ret.t.ml.min')

        return final_df

def shimadzu_batch(directory) :
    '''Applies shimadzu_to_csv on all Shimadzu .txt files in a directory.'''
    pass
#     dir_list = os.listdir(os.getcwd())
#
#     ints = []
#     for line in dir_list:
#     	if 'txt' in line:
#     		l = int(line.split('.')[0])
#     		ints.append(l)
#
#     maxint= max(ints)
#
#     for f in xrange(1, max(ints)+1):
#     	shimadzu_to_csv()

if __name__ == '__main__' :
    shimadzu_to_csv('./test_data/shimadzu_test_1.txt')
